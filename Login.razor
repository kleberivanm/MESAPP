@page "/login"
@using loginv3.Services
@using loginv3.Models
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h3>Inicio de Sesión</h3>
<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Correo:</label>
        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>
    <div class="form-group">
        <label for="password">Contraseña:</label>
        <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Iniciar Sesión</button>

    <p>¿Sin cuenta? <NavLink href="/register">Regístrate</NavLink></p>
</EditForm>

@if (loginError)
{
    <div class="alert alert-danger">El usuario no existe o la contraseña es incorrecta.</div>
}

@code {
    private User loginModel = new User();
    private bool loginError = false;

    private async Task HandleLogin()
    {
        var user = await UserService.LoginAsync(loginModel.Email, loginModel.Password);

        if (user != null)
        {
            loginError = false;
            // Guardar el correo electrónico en localStorage
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", "userEmail", loginModel.Email);
            // Redirigir a la página de reservas anteriores
            NavigationManager.NavigateTo("previousreservations");
        }
        else
        {
            loginError = true; // Muestra un mensaje de error si el login falla
        }
    }
}

